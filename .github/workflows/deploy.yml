name: Setup terraform plan
on:
  push:
  workflow_dispatch:
env:
  DOCKER_IMAGE_NAME: "gymcoach"
  TERRAFORM_VERSION: "1.9.5"

jobs:
  docker-plan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - id: setup
      name: Setup `terraform`
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - id: terraform
      name: Terraform Output
      env:
        AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BACKEND_BUCKET_NAME: ${{ vars.BACKEND_BUCKET_NAME }}
        BACKEND_REGION: ${{ vars.BACKEND_REGION }}
        BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
      working-directory: "./terraform"
      run: |
        echo $(pwd)
        terraform init \
          -backend-config='bucket='$BACKEND_BUCKET_NAME \
          -backend-config='region='$BACKEND_REGION \
          -backend-config='key='$BACKEND_KEY
        
        terraform plan -target aws_ecr_repository.main  \
          -target aws_iam_group.ecr_image_pushers \
          -target aws_iam_group_policy.ecr_image_pushers \
          -target aws_iam_group_membership.ecr_image_pushers -out=tf.plan
        
        terraform show -json tf.plan | jq '.'

    - name: Upload Terraform Plan as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ./terraform/tf.plan


  docker-apply:
    if: github.event_name == 'workflow_dispatch'
    needs: docker-plan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Download Terraform Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    - name: Apply Terraform Plan
      run: |
        terraform init \
          -backend-config='bucket='$BACKEND_BUCKET_NAME \
          -backend-config='region='$BACKEND_REGION \
          -backend-config='key='$BACKEND_KEY
        terraform apply -auto-approve tf.plan

    - name: echo registry endpoint
      run: |
        registry_endpoint=$(terraform output -raw backend_repository_url)
        echo "registry_endpoint=$registry_endpoint" >> "$GITHUB_OUTPUT"

    - id: image-version
      name: Generate Version Number
      run: |
        echo "version=$(date +'%Y.%m').${{ github.run_number }}" >> "$GITHUB_OUTPUT"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.PRIMARY_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Debug output
      run: |
        echo "Registry Endpoint: ${{ steps.terraform.outputs.registry_endpoint }}"
        echo "Version: ${{ steps.image-version.outputs.version }}"

    - name: Build and push Docker image to ACR
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.DOCKER_WORKING_DIRECTORY }}
        push: true
        tags: ${{ steps.terraform.outputs.registry_endpoint }}:${{ steps.image-version.outputs.version }}

  terraform-architecture-plan:
    needs: docker-apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - id: terraform
        name: Terraform Output
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BACKEND_BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BACKEND_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        working-directory: "./terraform"
        run: |
          echo $(pwd)
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config='key='$BACKEND_KEY

          terraform plan -out=tf.plan
          
          terraform show -json tf.plan | jq '.'

      - name: Upload Terraform Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-architecture-plan
          path: ./terraform/tf.plan

  terraform-architecture-apply:
    if: github.event_name == 'workflow_dispatch'
    needs: terraform-architecture-plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: setup
        name: Setup `terraform`
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-architecture-plan

      - id: terraform
        name: Terraform Output
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BACKEND_BUCKET_NAME: ${{ vars.BACKEND_BUCKET_NAME }}
          BACKEND_REGION: ${{ vars.BACKEND_REGION }}
          BACKEND_KEY: ${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}
        working-directory: "./terraform"
        run: |
          echo $(pwd)
          terraform init \
            -backend-config='bucket='$BACKEND_BUCKET_NAME \
            -backend-config='region='$BACKEND_REGION \
            -backend-config='key='$BACKEND_KEY

          terraform apply -auto-approve tf.plan



